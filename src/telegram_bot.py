import requests
import logging
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler, CallbackQueryHandler
)

API_URL = "http://127.0.0.1:8787/api"
BOT_TOKEN = "7364112514:AAGi4LAVefHuljYgSIPbxvQK-Kvs_yvW4Tk"

CHOOSING_DATE, CHOOSING_TIME, ENTER_NAME, ENTER_PHONE = range(4)

logging.basicConfig(level=logging.INFO)

def format_slots_table(slots: list[str]) -> str:
    header = "üóìÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:\n\n"
    rows = ""
    for i in range(0, len(slots), 3):
        row = " | ".join(f"{slot:^8}" for slot in slots[i:i+3])
        rows += row + "\n"
    return header + "```\n" + rows + "```"

# /start
from telegram import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üì≤ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://your-app-url.com"))]
    ], resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/book ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/mybookings ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n",
        reply_markup=keyboard
    )


# /book
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)")
    return CHOOSING_DATE

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
async def choose_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date = update.message.text
    context.user_data["date"] = date
    try:
        r = requests.get(f"{API_URL}/slots", params={"date": date})
        r.raise_for_status()
        slots = r.json().get("available", [])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    if not slots:
        await update.message.reply_text("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
        return CHOOSING_DATE

    await update.message.reply_text(format_slots_table(slots), parse_mode="Markdown")
    markup = ReplyKeyboardMarkup([[slot] for slot in slots], one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=markup)
    return CHOOSING_TIME

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    return ENTER_NAME

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    return ENTER_PHONE

# –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    telegram_id = update.effective_user.id

    user_payload = {
        "telegram_id": telegram_id,
        "name": context.user_data["name"],
        "phone": context.user_data["phone"],
        "role": "user"
    }

    try:
        r = requests.get(f"{API_URL}/users/{telegram_id}")
        if r.status_code == 200:
            user_id = r.json()["id"]
        else:
            r = requests.post(f"{API_URL}/users", json=user_payload)
            r.raise_for_status()
            user_id = r.json()["id"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

    booking_payload = {
        "user_id": user_id,
        "date": context.user_data["date"],
        "time": context.user_data["time"]
    }

    try:
        r = requests.post(f"{API_URL}/bookings", json=booking_payload)
        if r.status_code == 201:
            await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="show_bookings")]
            ])
            await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {r.json().get('error')}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /book, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# /mybookings –∏ inline-–∫–Ω–æ–ø–∫–∞
async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    try:
        r = requests.get(f"{API_URL}/users/{telegram_id}")
        if r.status_code != 200:
            await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        user_id = r.json()["id"]
        r = requests.get(f"{API_URL}/bookings", params={"user_id": user_id})
        bookings = r.json()
        if not bookings:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        for booking in bookings:
            text = f"üìÖ {booking['date']} –≤ {booking['time']}"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{booking['id']}")]
            ])
            await update.message.reply_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
async def show_bookings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await my_bookings(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
async def delete_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    booking_id = query.data.split(":")[1]

    try:
        r = requests.delete(f"{API_URL}/bookings/{booking_id}")
        if r.status_code == 200:
            await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

# –ó–∞–ø—É—Å–∫
def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = ApplicationBuilder().token("7364112514:AAGi4LAVefHuljYgSIPbxvQK-Kvs_yvW4Tk").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("book", book)],
        states={
            CHOOSING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_date)],
            CHOOSING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mybookings", my_bookings))
    app.add_handler(CallbackQueryHandler(delete_booking, pattern=r"^delete:\d+$"))
    app.add_handler(CallbackQueryHandler(show_bookings_callback, pattern="^show_bookings$"))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
